%================================================================
%        Prey-Predator Simulation Family Member Generator
%================================================================
%
% Name of File: SpeciesPopulations.m
%
% Description: This is an auto-generated file generated by
%   PreyPredatorFamilyGenerator.exe AML compiler & composer.
%   
%   Contains algorithms to calculate the species populations
%   for the prey-predator populations simulation.
%
% Copyright:
%  This software is open source and reuseable by anyone within
%  the organization.
%================================================================
classdef SpeciesPopulations
    %UNTITLED Summary of this class goes here
    %   Detailed explanation goes here
    
    properties
        x; %population size of this specie
        %so I realized we can't update specie one by one, otherwise
        % the order could affect how the other species are updated.
        %therefore I have made another variable, called updatedPopulation
        updatedPopulation;
        %x is only updated when updatedPopulation is updated.
        %you need to update all populations from the main program once all
        %calculations are done. (which will set x to updatedPopulation
        br; %birth rate for this specie
        dr; %natural death rate of this specie
        af; %aggressiveness factors of species
        ef; %evasiveness factors of species
        aging; %death rate of species based on aging
        %recall aging is factored into death rate (along with disease)
        disease; %specie's resitance to diseases.
        AFM; %specie's aggressiveness multiplier
        EFM; %specie's evasiveness multiplier
        S; %scaling factor (factors in land area. this will be shown
        %in constructor).
        preys=[]; %array of species that this specie preys on
        hr=[]; %array of numbers that this specie hunts species(idx)
        %the hr numbers MUST match the indices of preys.
        %e.g. if preys(1) is chicken, hr(1) is the number of times
        %this species feeds on chickens.
        %recall hr is the # of times this species hunts species j
        foods=[]; %array of foods that this specie eats.
        numMeals=[]; % array of food w/numbers needs to be defined
        %recall numMeals is number of meals this species eats of food j
        %similar to preys with hr, if foods(1) is grass
        %numMeals(1) is the number of times this species eats grass.
        preds=[]; %array of species that predate on this specie
        huntedRate=[]; %I am ALSO going to need an array matching preds
        %that has the number of times THAT predator hunts THIS species.
        water; %the water source.
        numDrinks=[]; %array of number of times this specie visits
        %the water source corresponding to water array (see
        %preds->huntedRate, or foods->numMeals.
        
    end
    
    methods
        function specie = SpeciesPopulations(initialPopulation, numMeals, birthRate, af, ef, aging, disease, AFM, EFM, huntingRate, scalingFactor, arrayOfPreys, arrayOfFoods, arrayOfPreds, huntedRate, water, numDrinks, huntingStyle)
            specie.x=initialPopulation;
            specie.numMeals = numMeals;
            specie.br=birthRate;
            specie.af = af;
            specie.ef = ef;
            specie.aging = aging;
            specie.disease = disease;
            specie.AFM = AFM*(1+huntingStyle);
            specie.EFM = EFM;
            specie.hr = huntingRate;
            specie.S = scalingFactor;
            specie.preys = arrayOfPreys;
            specie.foods = arrayOfFoods;
            specie.preds = arrayOfPreds;
            specie.dr = aging*(2-disease);
            specie.huntedRate = huntedRate;
            specie.water=water;
            specie.numDrinks=numDrinks;
            
            
            
        end
        function calculateUpdate(time)
            a= specie.br/(length(specie.preys) + length(specie.foods));
            b1=0;
            for idx = 1:numel(specie.preys)
                b1a = 1; %need to separate into parts for better
                %understanding
                thisSpecies =(specie.preys(idx));
                %first the af*AFM/ef*EFM
                b1a= b1a*(specie.af*specie.AFM/(thisSpecies.getef()*thisSpecies.getEFM()));
                b1a= b1a*specie.hr(idx)*specie.x*thisSpecies.getx();
                b1a = b1a/specie.S;
                b1= b1 + b1a;
            end
            b2=0; 
            for idx = 1:numel(specie.foods)
                thisFoods = (specie.foods(idx));
                b2= b2 + specie.numMeals(idx)*specie.x*thisFoods.getf()/specie.S;
            end
            b3=0;
            for idx = 1:numel(specie.water)
                thisWaterSource = specie.water(idx);
                b3= b3+ specie.numDrinks(idx)*specie.x*thisWaterSource.getw()/specie.S;
            end
            
            b=b1 + b2+b3;
            c=0;
            for idx=1:numel(specie.preds)
                c1=1;
                thisSpecies = specie.preds(idx);
                c1 =c1*(thisSpecies.getaf()*thisSpecies.getAFM());
                c1=c1/(specie.ef*specie.EFM)*specie.huntedRate(idx);
                c1=c1*specie.x*thisSpecies.getx()/specie.S;
                c= c+c1;
            end
            d = specie.dr*specie.x;
            specie.updatedPopulation = (a*b-c-d)*time + specie.x;
            
            %NOTE the higher the time, the less accurate the simulation
            %NOTE2: dx/dt is the rate based on time (population/time)
            %so of course we need to multiply by time to get the
            %population change over a period of time.
        end
        function outputef = getef()
            outputef = specie.ef;
        end
        function outputEFM = getEFM()
            outputEFM = specie.EFM;
        end
        function outputAFM = getAFM()
            outputAFM = specie.AFM;
        end
        function outputaf = getaf()
            outputaf = specie.af;
        end
        function outputx = getx()
            outputx = specie.x;
        end
        function update()
            specie.x = specie.updatedPopulation;
        end
            
    end
    
    
end
%================================================================
%----------------------------------------------------------------
% 2015-11-29:
%  Auto-generated file.
%----------------------------------------------------------------
%================================================================
